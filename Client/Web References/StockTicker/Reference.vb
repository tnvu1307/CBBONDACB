'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace StockTicker
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="StockTickerSoap", [Namespace]:="http://tempuri.org/GetStock/StockTicker")>  _
    Partial Public Class StockTicker
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private StartSTCAdapterOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetOrderBookOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTradeBookOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetStockTickerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MarketWatchOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MarketDeepOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = "http://localhost/GetStock/StockTicker.asmx"
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event StartSTCAdapterCompleted As StartSTCAdapterCompletedEventHandler
        
        '''<remarks/>
        Public Event GetOrderBookCompleted As GetOrderBookCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTradeBookCompleted As GetTradeBookCompletedEventHandler
        
        '''<remarks/>
        Public Event GetStockTickerCompleted As GetStockTickerCompletedEventHandler
        
        '''<remarks/>
        Public Event MarketWatchCompleted As MarketWatchCompletedEventHandler
        
        '''<remarks/>
        Public Event MarketDeepCompleted As MarketDeepCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetStock/StockTicker/StartSTCAdapter", RequestNamespace:="http://tempuri.org/GetStock/StockTicker", ResponseNamespace:="http://tempuri.org/GetStock/StockTicker", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function StartSTCAdapter(ByVal v_strMARKET As String, ByVal v_strOPTION As String) As String
            Dim results() As Object = Me.Invoke("StartSTCAdapter", New Object() {v_strMARKET, v_strOPTION})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginStartSTCAdapter(ByVal v_strMARKET As String, ByVal v_strOPTION As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("StartSTCAdapter", New Object() {v_strMARKET, v_strOPTION}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndStartSTCAdapter(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub StartSTCAdapterAsync(ByVal v_strMARKET As String, ByVal v_strOPTION As String)
            Me.StartSTCAdapterAsync(v_strMARKET, v_strOPTION, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub StartSTCAdapterAsync(ByVal v_strMARKET As String, ByVal v_strOPTION As String, ByVal userState As Object)
            If (Me.StartSTCAdapterOperationCompleted Is Nothing) Then
                Me.StartSTCAdapterOperationCompleted = AddressOf Me.OnStartSTCAdapterOperationCompleted
            End If
            Me.InvokeAsync("StartSTCAdapter", New Object() {v_strMARKET, v_strOPTION}, Me.StartSTCAdapterOperationCompleted, userState)
        End Sub
        
        Private Sub OnStartSTCAdapterOperationCompleted(ByVal arg As Object)
            If (Not (Me.StartSTCAdapterCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent StartSTCAdapterCompleted(Me, New StartSTCAdapterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetStock/StockTicker/GetOrderBook", RequestNamespace:="http://tempuri.org/GetStock/StockTicker", ResponseNamespace:="http://tempuri.org/GetStock/StockTicker", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetOrderBook() As String
            Dim results() As Object = Me.Invoke("GetOrderBook", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginGetOrderBook(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetOrderBook", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetOrderBook(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetOrderBookAsync()
            Me.GetOrderBookAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetOrderBookAsync(ByVal userState As Object)
            If (Me.GetOrderBookOperationCompleted Is Nothing) Then
                Me.GetOrderBookOperationCompleted = AddressOf Me.OnGetOrderBookOperationCompleted
            End If
            Me.InvokeAsync("GetOrderBook", New Object(-1) {}, Me.GetOrderBookOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetOrderBookOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetOrderBookCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetOrderBookCompleted(Me, New GetOrderBookCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetStock/StockTicker/GetTradeBook", RequestNamespace:="http://tempuri.org/GetStock/StockTicker", ResponseNamespace:="http://tempuri.org/GetStock/StockTicker", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTradeBook() As String
            Dim results() As Object = Me.Invoke("GetTradeBook", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginGetTradeBook(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetTradeBook", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetTradeBook(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTradeBookAsync()
            Me.GetTradeBookAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTradeBookAsync(ByVal userState As Object)
            If (Me.GetTradeBookOperationCompleted Is Nothing) Then
                Me.GetTradeBookOperationCompleted = AddressOf Me.OnGetTradeBookOperationCompleted
            End If
            Me.InvokeAsync("GetTradeBook", New Object(-1) {}, Me.GetTradeBookOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTradeBookOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTradeBookCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTradeBookCompleted(Me, New GetTradeBookCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetStock/StockTicker/GetStockTicker", RequestNamespace:="http://tempuri.org/GetStock/StockTicker", ResponseNamespace:="http://tempuri.org/GetStock/StockTicker", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetStockTicker() As String
            Dim results() As Object = Me.Invoke("GetStockTicker", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginGetStockTicker(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetStockTicker", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetStockTicker(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetStockTickerAsync()
            Me.GetStockTickerAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetStockTickerAsync(ByVal userState As Object)
            If (Me.GetStockTickerOperationCompleted Is Nothing) Then
                Me.GetStockTickerOperationCompleted = AddressOf Me.OnGetStockTickerOperationCompleted
            End If
            Me.InvokeAsync("GetStockTicker", New Object(-1) {}, Me.GetStockTickerOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetStockTickerOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetStockTickerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetStockTickerCompleted(Me, New GetStockTickerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetStock/StockTicker/MarketWatch", RequestNamespace:="http://tempuri.org/GetStock/StockTicker", ResponseNamespace:="http://tempuri.org/GetStock/StockTicker", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function MarketWatch(ByRef v_strMessageListOfSymbol As String, ByRef v_strTotalMarket As String) As String
            Dim results() As Object = Me.Invoke("MarketWatch", New Object() {v_strMessageListOfSymbol, v_strTotalMarket})
            v_strMessageListOfSymbol = CType(results(1),String)
            v_strTotalMarket = CType(results(2),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginMarketWatch(ByVal v_strMessageListOfSymbol As String, ByVal v_strTotalMarket As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("MarketWatch", New Object() {v_strMessageListOfSymbol, v_strTotalMarket}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndMarketWatch(ByVal asyncResult As System.IAsyncResult, ByRef v_strMessageListOfSymbol As String, ByRef v_strTotalMarket As String) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            v_strMessageListOfSymbol = CType(results(1),String)
            v_strTotalMarket = CType(results(2),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub MarketWatchAsync(ByVal v_strMessageListOfSymbol As String, ByVal v_strTotalMarket As String)
            Me.MarketWatchAsync(v_strMessageListOfSymbol, v_strTotalMarket, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MarketWatchAsync(ByVal v_strMessageListOfSymbol As String, ByVal v_strTotalMarket As String, ByVal userState As Object)
            If (Me.MarketWatchOperationCompleted Is Nothing) Then
                Me.MarketWatchOperationCompleted = AddressOf Me.OnMarketWatchOperationCompleted
            End If
            Me.InvokeAsync("MarketWatch", New Object() {v_strMessageListOfSymbol, v_strTotalMarket}, Me.MarketWatchOperationCompleted, userState)
        End Sub
        
        Private Sub OnMarketWatchOperationCompleted(ByVal arg As Object)
            If (Not (Me.MarketWatchCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MarketWatchCompleted(Me, New MarketWatchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetStock/StockTicker/MarketDeep", RequestNamespace:="http://tempuri.org/GetStock/StockTicker", ResponseNamespace:="http://tempuri.org/GetStock/StockTicker", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function MarketDeep(ByRef v_strMessageListOfSymbol As String) As String
            Dim results() As Object = Me.Invoke("MarketDeep", New Object() {v_strMessageListOfSymbol})
            v_strMessageListOfSymbol = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginMarketDeep(ByVal v_strMessageListOfSymbol As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("MarketDeep", New Object() {v_strMessageListOfSymbol}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndMarketDeep(ByVal asyncResult As System.IAsyncResult, ByRef v_strMessageListOfSymbol As String) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            v_strMessageListOfSymbol = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub MarketDeepAsync(ByVal v_strMessageListOfSymbol As String)
            Me.MarketDeepAsync(v_strMessageListOfSymbol, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MarketDeepAsync(ByVal v_strMessageListOfSymbol As String, ByVal userState As Object)
            If (Me.MarketDeepOperationCompleted Is Nothing) Then
                Me.MarketDeepOperationCompleted = AddressOf Me.OnMarketDeepOperationCompleted
            End If
            Me.InvokeAsync("MarketDeep", New Object() {v_strMessageListOfSymbol}, Me.MarketDeepOperationCompleted, userState)
        End Sub
        
        Private Sub OnMarketDeepOperationCompleted(ByVal arg As Object)
            If (Not (Me.MarketDeepCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MarketDeepCompleted(Me, New MarketDeepCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub StartSTCAdapterCompletedEventHandler(ByVal sender As Object, ByVal e As StartSTCAdapterCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class StartSTCAdapterCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub GetOrderBookCompletedEventHandler(ByVal sender As Object, ByVal e As GetOrderBookCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetOrderBookCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub GetTradeBookCompletedEventHandler(ByVal sender As Object, ByVal e As GetTradeBookCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTradeBookCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub GetStockTickerCompletedEventHandler(ByVal sender As Object, ByVal e As GetStockTickerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetStockTickerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub MarketWatchCompletedEventHandler(ByVal sender As Object, ByVal e As MarketWatchCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class MarketWatchCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property v_strMessageListOfSymbol() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property v_strTotalMarket() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub MarketDeepCompletedEventHandler(ByVal sender As Object, ByVal e As MarketDeepCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class MarketDeepCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property v_strMessageListOfSymbol() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
End Namespace
